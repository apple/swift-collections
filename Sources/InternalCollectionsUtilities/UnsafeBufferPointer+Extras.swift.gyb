//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Collections open source project
//
// Copyright (c) 2021 - 2024 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
//
//===----------------------------------------------------------------------===//

%{
  from gyb_utils import *
}%
${autogenerated_warning()}

% for modifier in visibility_levels:
${visibility_boilerplate(modifier)}
extension UnsafeBufferPointer where Element: ~Copyable {
  @inlinable
  @inline(__always)
  ${modifier} static var _empty: Self {
    .init(start: nil, count: 0)
  }

  @inlinable
  @inline(__always)
  ${modifier} func _ptr(at index: Int) -> UnsafePointer<Element> {
    assert(index >= 0 && index < count)
    return baseAddress.unsafelyUnwrapped + index
  }

  @inlinable
  ${modifier} func _extracting(first n: Int) -> Self {
    assert(n >= 0)
    if n >= count { return self }
    return extracting(Range(uncheckedBounds: (0, n)))
  }

  @inlinable
  ${modifier} func _extracting(last n: Int) -> Self {
    assert(n >= 0)
    if n >= count { return self }
    return extracting(Range(uncheckedBounds: (count - n, count)))
  }
}

% end
${visibility_boilerplate("end")}
